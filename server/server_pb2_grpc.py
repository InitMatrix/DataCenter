# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import server_pb2 as server__pb2


class MasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BlockLast = channel.unary_unary(
                '/pb.Master/BlockLast',
                request_serializer=server__pb2.BlockLastAsk.SerializeToString,
                response_deserializer=server__pb2.BlockLastReply.FromString,
                )
        self.BlockDetail = channel.unary_unary(
                '/pb.Master/BlockDetail',
                request_serializer=server__pb2.BlockDetailAsk.SerializeToString,
                response_deserializer=server__pb2.BlockDetailReply.FromString,
                )
        self.EventLast = channel.unary_unary(
                '/pb.Master/EventLast',
                request_serializer=server__pb2.EventLastAsk.SerializeToString,
                response_deserializer=server__pb2.EventLastReply.FromString,
                )
        self.EventFilter = channel.unary_unary(
                '/pb.Master/EventFilter',
                request_serializer=server__pb2.EventFilterAsk.SerializeToString,
                response_deserializer=server__pb2.EventFilterReply.FromString,
                )
        self.OraclePrice = channel.unary_unary(
                '/pb.Master/OraclePrice',
                request_serializer=server__pb2.OraclePriceAsk.SerializeToString,
                response_deserializer=server__pb2.OraclePriceReply.FromString,
                )
        self.OraclePriceChg = channel.unary_unary(
                '/pb.Master/OraclePriceChg',
                request_serializer=server__pb2.OraclePriceChgAsk.SerializeToString,
                response_deserializer=server__pb2.OraclePriceChgReply.FromString,
                )
        self.OracleKline = channel.unary_unary(
                '/pb.Master/OracleKline',
                request_serializer=server__pb2.OracleKlineAsk.SerializeToString,
                response_deserializer=server__pb2.OracleKlineReply.FromString,
                )


class MasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BlockLast(self, request, context):
        """block 相关
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EventLast(self, request, context):
        """event 相关
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EventFilter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OraclePrice(self, request, context):
        """喂价源相关
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OraclePriceChg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OracleKline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BlockLast': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockLast,
                    request_deserializer=server__pb2.BlockLastAsk.FromString,
                    response_serializer=server__pb2.BlockLastReply.SerializeToString,
            ),
            'BlockDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockDetail,
                    request_deserializer=server__pb2.BlockDetailAsk.FromString,
                    response_serializer=server__pb2.BlockDetailReply.SerializeToString,
            ),
            'EventLast': grpc.unary_unary_rpc_method_handler(
                    servicer.EventLast,
                    request_deserializer=server__pb2.EventLastAsk.FromString,
                    response_serializer=server__pb2.EventLastReply.SerializeToString,
            ),
            'EventFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.EventFilter,
                    request_deserializer=server__pb2.EventFilterAsk.FromString,
                    response_serializer=server__pb2.EventFilterReply.SerializeToString,
            ),
            'OraclePrice': grpc.unary_unary_rpc_method_handler(
                    servicer.OraclePrice,
                    request_deserializer=server__pb2.OraclePriceAsk.FromString,
                    response_serializer=server__pb2.OraclePriceReply.SerializeToString,
            ),
            'OraclePriceChg': grpc.unary_unary_rpc_method_handler(
                    servicer.OraclePriceChg,
                    request_deserializer=server__pb2.OraclePriceChgAsk.FromString,
                    response_serializer=server__pb2.OraclePriceChgReply.SerializeToString,
            ),
            'OracleKline': grpc.unary_unary_rpc_method_handler(
                    servicer.OracleKline,
                    request_deserializer=server__pb2.OracleKlineAsk.FromString,
                    response_serializer=server__pb2.OracleKlineReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.Master', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Master(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BlockLast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Master/BlockLast',
            server__pb2.BlockLastAsk.SerializeToString,
            server__pb2.BlockLastReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Master/BlockDetail',
            server__pb2.BlockDetailAsk.SerializeToString,
            server__pb2.BlockDetailReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EventLast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Master/EventLast',
            server__pb2.EventLastAsk.SerializeToString,
            server__pb2.EventLastReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EventFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Master/EventFilter',
            server__pb2.EventFilterAsk.SerializeToString,
            server__pb2.EventFilterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OraclePrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Master/OraclePrice',
            server__pb2.OraclePriceAsk.SerializeToString,
            server__pb2.OraclePriceReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OraclePriceChg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Master/OraclePriceChg',
            server__pb2.OraclePriceChgAsk.SerializeToString,
            server__pb2.OraclePriceChgReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OracleKline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Master/OracleKline',
            server__pb2.OracleKlineAsk.SerializeToString,
            server__pb2.OracleKlineReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AdminStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartSyncBlock = channel.unary_unary(
                '/pb.Admin/StartSyncBlock',
                request_serializer=server__pb2.StartSyncBlockAsk.SerializeToString,
                response_deserializer=server__pb2.StartSyncBlockReply.FromString,
                )


class AdminServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartSyncBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartSyncBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSyncBlock,
                    request_deserializer=server__pb2.StartSyncBlockAsk.FromString,
                    response_serializer=server__pb2.StartSyncBlockReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.Admin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Admin(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartSyncBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Admin/StartSyncBlock',
            server__pb2.StartSyncBlockAsk.SerializeToString,
            server__pb2.StartSyncBlockReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
